<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ Copyright (C) 2007-2020 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License version 3 as published by
  ~ the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

    <entry key="social.ugc.getTree1">
        {$project:{doc:"$$CURRENT",ancestors:{$cond:[{$eq:["$ancestors",[]]},['Fry'],'$ancestors']}}}
    </entry>

    <entry key="social.ugc.getTree2">
        {$match:{"doc.contextId":#,$or:[{ancestors:{$in:#}},{_id:#}]}}
    </entry>

    <entry key="social.ugc.getTreeChildrenOnly">
        {$match:{"doc.contextId":#,{ancestors:{$in:#}}}
    </entry>

    <entry key="social.ugc.getTree3">
        {$unwind:"$ancestors"}
    </entry>

    <entry key="social.ugc.getTree4">
        {$group:{_id:"$_id",ancesterSize:{$sum:{$cond:[{$eq:["$ancestors",'Fry']},0,1]}},doc:{$addToSet:"$$CURRENT"}}}
    </entry>

    <entry key="social.ugc.getTree5">
        {$sort:{ancestors:1}}
    </entry>

    <entry key="social.ugc.getTree6">
        {$unwind:"$doc"}
    </entry>

    <entry key="social.ugc.getTree7">
        {$group:{_id:"$_id",ancesterSize:{$first:"$ancesterSize"},doc:{$first:"$doc"}}}
    </entry>

    <entry key="social.ugc.getTree8">
        {$sort:{ancesterSize:1,"doc.doc.createDate":-1}}
    </entry>

    <entry key="social.ugc.getTree9">
        {$match:{ancesterSize:{$lte:#}}}
    </entry>

    <entry key="social.ugc.getTree10">
        {$project:{ugc:"$doc.doc",_id:0}}
    </entry>

    <entry key="social.ugc.byTargetId">
        {contextId:#,targetId:#}
    </entry>

    <entry key="social.ugc.byTargetIdRootLvl">
        {contextId:#,targetId:#,ancestors:{$size:0},moderationStatus:{$nin:#}}
    </entry>

    <entry key="social.ugc.byTargetIdWithFixLvl">
        {contextId:#,targetId:#,ancestors:{$size:#},moderationStatus:{$nin:#}}
    </entry>

    <entry key="social.ugc.byContextTargetAncestorsExact">
        {contextId:#,targetId:#,ancestors:{$all:#},moderationStatus:{$nin:#}}
    </entry>

    <entry key="social.ugc.byContextAncestorsExact">
        {contextId:#,ancestors:{$all:#},ancestors:{$size:#}}
    </entry>

    <entry key="social.ugc.byTargetIdRootNLvl">
        {
        targetId:#,
        contextId:#,
        moderationStatus:{$nin:#},
        $or:[
        {ancestors:{$in:#}},
        {_id:{$in:#}}
        ],
        $where:" %@ >= this.ancestors.length"
        }
    </entry>
    <entry key="social.ugc.byContextAndId">
        {_id:#,contextId:#}
    </entry>
    <entry key="social.ugc.byTargetId">
        {contextId:#,targetId:#}
    </entry>
    <entry key="social.ugc.deleteAttribute">
        { $unset:#}
    </entry>
    <entry key="social.ugc.addAttributes">
        {$set:{attributes:#}}
    </entry>
    <entry key="social.ugc.byIds">
        {_id:{$in:#}}
    </entry>
    <entry key="social.ugc.childrenOf">
        {contextId:#,ancestors:{$in:#}}
    </entry>
    <entry key="social.ugc.defaultSort">
        {createDate:-1}
    </entry>
    <entry key="social.permissions.isAllowed">
        {actionName:#,roles:{$in:#},contextId:#}
    </entry>
    <entry key="social.permissions.byContextId">
        {contextId:#}
    </entry>
    <entry key="social.permissions.byContextIdAndActionName">
        {contextId:#,actionName:#}
    </entry>

    <entry key="social.permissions.updateRoles">
        {$set:{roles:#}}
    </entry>
    <entry key="social.context.byId">
        {_id:#}
    </entry>
    <entry key="social.ugc.byModerationStatus">
        {moderationStatus:#,contextId:#}
    </entry>
    <entry key="social.ugc.byModerationStatusAndTargetId">
        {moderationStatus:#,contextId:#,targetId:#}
    </entry>
    <entry key="social.system.audit.deleteByIds">
        {_id:{$in:#}}
    </entry>
    <entry key="social.system.audit.deleteByIds">
        {_id:{$in:#}}
    </entry>
    <entry key="social.system.audit.byDateRangeCTX">
        {contextId:#,created_on: {$gte: #, $lt: #}}
    </entry>
    <entry key="social.system.audit.byDateRange">
        {created_on: {$gte: #, $lt: #}}
    </entry>
    <entry key="social.notifications.findById">
        {_id:#}
    </entry>
    <entry key="social.notifications.removeUserWatch">
        { $pull: { watchers:{_id:#}}}
    </entry>
    <entry key="social.notifications.addUserWatch">
        { $addToSet:{ watchers:{_id:#,frequency:#}}}
    </entry>
    <entry key="social.notifications.isBeenWatched">
        {_id:#,"watchers._id":#}
    </entry>
    <entry key="social.notifications.byWatchersNotEmpty">
        {watchers: {$exists: true, $not: {$size: 0}}}
    </entry>
    <entry key="social.notification.notificationToSend">
        {"payload.targetId":{$in:#},created_on: {$gte: #, $lt: #}}
    </entry>

    <entry key="social.notification.getProfilePt1">
        {$match:{watchers: {$exists: true, $not: {$size: 0}}}}
    </entry>

    <entry key="social.notification.getProfilePt2">
        {$unwind:"$watchers"}
    </entry>
    <entry key="social.notification.getProfilePt3">
        {$match:{"watchers.frequency":# }}
    </entry>
    <entry key="social.notification.getProfilePt4">
        {$group:{_id:"$_id",profiles:{$push:"$watchers._id"}}}
    </entry>

    <entry key="social.notification.audit.getNotificationDigestPt1">
        {
        $match:{
        "payload.targetId":#,
        "payload.contextId":#,
        "payload.moderationStatus":{$nin:#},
        userId:{$nin:#},
        auditDate: {$gte: #, $lt: #}
        }
        }
    </entry>
    <entry key="social.notification.audit.getNotificationDigestPt2">
        {$group:{_id:"$actionName",contextId:{$last:"$payload.contextId"},ugcList:{$push:"$payload"}}}
    </entry>
    <entry key="social.system.notification.email.byCtxIdAndName">
        {contextId:#,name:#}
    </entry>
    <entry key="social.system.preferences.emailPreferencesByContextId">
        {_id:#}
    </entry>

    <entry key="social.system.preferences.savePreferencesByContextId">
        {$set:{
        "email.host":#,
        "email.encoding":#,
        "email.port":#,
        "email.auth":#,
        "email.username":#,
        "email.password":#,
        "email.tls":#,7
        "email.replyTo":#,
        "email.from":#,
        "email.priority":#,
        "email.subject":#
        }
        }
    </entry>
    <entry key="social.system.preferences.notificationEmailByType">
        { "_id" : #,templates:{$elemMatch:{type:#}}}
    </entry>
    <entry key="social.notification.byWatcherId1">
        {$unwind:"$watchers"}
    </entry>
    <entry key="social.notification.byWatcherId2">
        {$match:{"watchers._id":#}}
    </entry>
    <entry key="social.notification.byWatcherId3">
        {$project:{_id:1,frequency:"$watchers.frequency"}}
    </entry>
    <entry key="social.ugc.byFlaggedStatus">
        {contextId:#, moderationStatus:{ $ne: #  } , flags : {$exists:true}, $where:'this.flags.length>0'}
    </entry>
    <entry key="social.system.preferences.byContextAndTemplateType">
        {"_id":#,"templates.type":#}
    </entry>
    <entry key="social.system.preferences.updateContextTemplateType">
        {$set:{"templates.$.template":#}}
    </entry>
    <entry key="social.system.preferences.updateContextEmailPref">
        {$set:{"email.host" : #,"email.encoding" : #,"email.port" : #,"email.auth" : #,"email.username" :#,"email.password" :#,"email.tls" : #,"email.replyTo" : #,"email.from" : #,"email.priority" : #,"email.subject" : #
        }}
    </entry>
</properties>